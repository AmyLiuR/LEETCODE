# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        #find the middle node of the linknodes
        tort=head
        hare=head.next

        while hare and hare.next:
            tort=tort.next
            hare=hare.next.next
        # now tort is the last node of the first half
        #let's cut it into two halfs and reverse
        pre=None
        second=tort.next
        tort.next=None

        while second:
            temp=second.next
            second.next=pre
            pre=second
            second=temp
        #now the first node of the half is pre, for second=None

        #merge them together
        DP=head
        tort2=DP
        while pre:
            temp1,temp2=tort2.next,pre.next
            tort2.next=pre
            pre.next=temp1
            
            tort2, pre=temp1, temp2

        return DP




      
